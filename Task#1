import pytest
from checkers_les import checkout
import random, string
import yaml
from datetime import datetime

import subprocess
folder = f"/home/user"
folder1 = f"/home/zerg/folder1"

with open('config.yaml') as f:
    # читаем документ YAML
    data = yaml.safe_load(f)

@pytest.fixture()
def make_folders():
    # Фикстура создания папки (параметры подтягиваются из config файла)
    return checkout(f"mkdir {data['folder_in']} {data['folder_in']} {data['folder_ext']} {data['folder_ext2']}", "")

@pytest.fixture()
def clear_folders():
    # Фикстура очистки папки (параметры подтягиваются из config файла)
    return checkout(f"rm -rf {data['folder_in']} {data['folder_in']} {data['folder_ext']} {data['folder_ext2']}/*", "")

@pytest.fixture()
def make_files():
    # Фикстура создания файлов в папке с заданным размером (параметры подтягиваются из config файла)
    list_of_files = []
    for i in range(data["count"]):
        filename = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))
        if checkout(f"cd {data['folder_in']}; dd if=/dev/urandom of={filename} bs={data['bs']} count=1 iflag=fullblock", ""):
            list_of_files.append(filename)
    return list_of_files

@pytest.fixture()
def make_subfolder():
    # Фикстура для генерирования названия подпапок
    testfilename = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))
    subfoldername = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))
    # string.ascii_uppercase, string.digits - коллекции всех фукв и цифр
    if not checkout("cd {}; mkdir {}".format(data["folder_in"], subfoldername), ""):
        return None, None
    if not checkout(f"cd {data['folder_in']}/{subfoldername}; dd if=/dev/urandom of={testfilename} bs=1M count=1 iflag=fullblock", ""):
        return subfoldername, None
    else:
        return subfoldername, testfilename

@pytest.fixture(autouse=True)
def print_time():
    # Фикстура для измерения времени
    print(f"Start: {datetime.now().strftime('%H:%M:%S.%f')}")
    yield
    print(f"Finish: {datetime.now().strftime('%H:%M:%S.%f')}")


#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@pytest.fixture()
def add_log_file():
    with open('stat.txt', 'a') as f:
        time = print(f"Time status: {datetime.now().strftime('%H:%M:%S.%f')}")
        number_file_in_folder = subprocess.run(data["folder_in"], shell=True, stdout=subprocess.PIPE, encoding='utf-8')
        size_of_file = data["bs"]
        # ДОБАВЬ ЕЩЕ: статистика загрузки процессора из файла /proc/loadavg (можно писать просто всё содержимое этого файла).
        f.write(f"{time} - Number files: {number_file_in_folder} - Size of file: {size_of_file}")


def find_subprocess(path: str, text: str):
    result = subprocess.run(path, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, encoding='utf-8')
    lst = result.stdout.split("\n") + result.stderr.split("\n")
    print(lst, text in lst)
    if text in lst:
        return True
    else:
        return False


def test_step1():
    # a: добавить файлы в архив, если архивного файла не существует, создает его (архивация)
    assert find_subprocess(f"cd {folder}tst; 7z a ../out/arx2", "Everything is Ok"), "test1 FAIL"

def test_step2():
    # e: извлечение файлов из архива без использования имен каталогов — все файлы оказываются в текущей директории (дезархивация)
    assert find_subprocess(f"cd {folder}/out; 7z e arx2.7z -o{folder}/out -y", 'Everything is Ok'), "test2 FAIL"

def test_step3():
    # t: проверка целостности архива
    assert find_subprocess(f"cd {folder}/out; 7z t arx2.7z", 'Everything is Ok'), "test3 FAIL"

def test_step4():
    # l: вывести список содержимого архива
    assert find_subprocess(f"cd {folder}/out; 7z l arx2.7z", 'test.txt'), "test4 FAIL"

def test_step5():
    # x: файлы с полными путями
    assert find_subprocess(f"cd {folder}/out; 7z x arx2.7z -o/home/user/out/new_out", 'Everything is Ok'), "test5 FAIL"
